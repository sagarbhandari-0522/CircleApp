@model List<Post>
@using Humanizer;
﻿<main id="site__main" class="2xl:ml-[--w-side]  xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="lg:flex 2xl:gap-16 gap-12 max-w-[1065px] mx-auto" id="js-oversized">
        <div class="max-w-[680px] mx-auto">
            @* stories *@
            @await Component.InvokeAsync("Stories")
            <div class="md:max-w-[580px] mx-auto flex-1 xl:space-y-6 space-y-3">

                <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1">
                    <div class="flex items-center md:gap-3 gap-1">
                        <div class="flex-1 bg-slate-100 hover:bg-opacity-80 transition-all rounded-lg cursor-pointer" uk-toggle="target: #create-status">
                            <div class="py-2.5 text-center">What do you have in mind?</div>
                        </div>
                        <div class="cursor-pointer hover:bg-opacity-80 p-1 px-1.5 rounded-xl transition-all bg-pink-100/60 hover:bg-pink-100" uk-toggle="target: #create-status">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M15 8h.01" />
                                <path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
                                <path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
                                <path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
                            </svg>
                        </div>
                    </div>

                </div>

                @if (Model.Count == 0)
                {
                    <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1" style="width: 580px;">
                        Currently, there are no posts available. Would you like to create the first one?
                    </div>

                }
                else
                {
                    @foreach (var post in Model)
                    {
                        @* <p>@((DateTime.UtcNow-post.CreatedAt).Humanize())</p> *@
                        <partial name="Home/_posts" model="post"></partial>
                    }
                }


            </div>
        </div>
        <div class="flex-1">
            <div class="lg:space-y-4 lg:pb-8 max-lg:grid sm:grid-cols-2 max-lg:gap-6">
                <div class="box p-5 px-6">
                    @await Component.InvokeAsync("SuggestFriends")
                </div>
                <div class="box p-5 px-6 border1">
                    @await Component.InvokeAsync("Hashtags")

                </div>
            </div>
        </div>
    </div>
</main>

<partial name="Modals/_CreateStory" model="new StoryCreateVM()" />
<partial name="Modals/_CreateStatus" model="new PostCreateViewModel()" />
<partial name="Modals/_PostDeleteConfirmationModals" />

<script>
    document.addEventListener("DOMContentLoaded",function(){
        //Like post
          document.querySelectorAll('.like-form').forEach(form =>{
              form.addEventListener('submit',async function(e){
                  e.preventDefault();
                  const postId=form.dataset.postId;
                  const formData = new FormData();
                  formData.append("postId", postId);
                  const response=await fetch(form.action,{
                      method:"POST",
                      body:formData,
                  });
                  console.log(response);
                  if(response.ok)
                  {
                      var icon=form.querySelector('ion-icon');
                      var button=form.querySelector('button');
                      var data=await response.json();
                      if(data.isLiked)
                      {
                          icon.setAttribute('name','heart');
                          button.classList.add("text-red-500", "bg-red-100");
                      }
                      else{
                          icon.setAttribute("name","heart-outline");
                          button.classList.remove("text-red-500", "bg-red-100")
                      }
                      console.log(data.likeCount);
                      form.nextElementSibling.textContent=data.likeCount;

                  }
                  else{
                      console.log("Like is failed");
                  }
              });
          });
          // Favorite Post
          document.querySelectorAll(".favorite-form").forEach(form => {
              form.addEventListener("submit",async (e)=>{
                  e.preventDefault();
                  const PostId=form.dataset.postId;
                  console.log(PostId);
                  const formData=new FormData();
                  // const token=document.querySelector('input[name="__RequestVerificationToken"]')
                  formData.append("PostId",PostId);
                  const response= await fetch(form.action,{
                      method:"POST",
                      body:formData
                  });
                  if(response.ok)
                  {
                      const icon=form.querySelector('ion-icon');
                      const button=form.querySelector('button');
                      const result=await response.json();
                      if(result.isFavorite)
                      {
                          icon.setAttribute("name","bookmark");
                          button.classList.add("text-orange-500","bg-orange-100");
                      }
                      else
                      {
                          icon.setAttribute("name","bookmark-outline");
                          button.classList.remove("text-orange-500","bg-orange-100")
                      }
                      console.log(result.favoriteCount);
                      form.nextElementSibling.textContent=result.favoriteCount;

                  }


              })
          })



          function openPostDeleteConfirmation(postId) {
              console.log(postId);
              UIkit.dropdown('.post-options-dropdown').hide();
              document.getElementById('deleteConfirmationPostId').value = postId;
              UIkit.modal('#postDeleteDialog').show();
          }
    });
</script>